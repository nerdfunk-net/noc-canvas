version: '3.8'

# Load environment variables from .env file
# Make sure to copy .env.template to .env and configure your values
# or create your own .env file with the required variables

services:
  postgres:
    image: postgres:latest
    container_name: noc-postgres
    environment:
      POSTGRES_DB: ${NOC_DATABASE_NAME:-noc}
      POSTGRES_USER: ${NOC_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${NOC_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${NOC_DATABASE_PORT:-5432}:5432"
    networks:
      - noc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NOC_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8-alpine
    container_name: noc-redis
    command: redis-server --requirepass ${NOC_REDIS_PASSWORD:-changeme}
    ports:
      - "${NOC_REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - noc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${NOC_REDIS_PASSWORD:-changeme}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  noc-backend:
    build:
      context: ../
      dockerfile: docker/Dockerfile.backend
    container_name: noc-backend
    environment:
      # Database settings
      NOC_DATABASE: postgres
      NOC_USERNAME: ${NOC_USERNAME:-postgres}
      NOC_PASSWORD: ${NOC_PASSWORD:-postgres}
      NOC_DATABASE_PORT: 5432
      NOC_DATABASE_NAME: ${NOC_DATABASE_NAME:-noc}
      NOC_DATABASE_SSL: "false"
      
      # Redis settings
      NOC_REDIS_HOST: redis
      NOC_REDIS_PORT: 6379
      NOC_REDIS_PASSWORD: ${NOC_REDIS_PASSWORD:-changeme}
      NOC_REDIS_SSL: "false"
      
      # App settings
      SECRET_KEY: ${SECRET_KEY:-your-production-secret-key-change-this}
      DEFAULT_ADMIN_USERNAME: ${DEFAULT_ADMIN_USERNAME:-admin}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD:-admin123}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
    ports:
      - "8000:8000"
    volumes:
      - app_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - noc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  noc-worker:
    build:
      context: ../
      dockerfile: docker/Dockerfile.worker
    container_name: noc-worker
    environment:
      # Database settings
      NOC_DATABASE: postgres
      NOC_USERNAME: ${NOC_USERNAME:-postgres}
      NOC_PASSWORD: ${NOC_PASSWORD:-postgres}
      NOC_DATABASE_PORT: 5432
      NOC_DATABASE_NAME: ${NOC_DATABASE_NAME:-noc}
      NOC_DATABASE_SSL: "false"

      # Redis settings
      NOC_REDIS_HOST: redis
      NOC_REDIS_PORT: 6379
      NOC_REDIS_PASSWORD: ${NOC_REDIS_PASSWORD:-changeme}
      NOC_REDIS_SSL: "false"

      # App settings
      SECRET_KEY: ${SECRET_KEY:-your-production-secret-key-change-this}
      ALGORITHM: ${ALGORITHM:-HS256}

      # Internal API URL (for worker to call backend)
      INTERNAL_API_URL: http://noc-backend:8000
    volumes:
      - app_data:/app/data
    depends_on:
      - redis
      - postgres
      - noc-backend
    networks:
      - noc-network
    restart: unless-stopped

  noc-frontend:
    build:
      context: ../
      dockerfile: docker/Dockerfile.frontend
    container_name: noc-frontend
    ports:
      - "3000:80"
    depends_on:
      - noc-backend
    networks:
      - noc-network
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=http://noc-backend:8000

networks:
  noc-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local